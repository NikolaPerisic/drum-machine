{"version":3,"sources":["assets/sounds/tr808_clap.wav","assets/sounds/tr808_clave.wav","assets/sounds/tr808_closedhat_01.wav","assets/sounds/tr808_kick_01.wav","assets/sounds/tr808_kick_03.wav","assets/sounds/tr808_kick_11.wav","assets/sounds/tr808_rimshot.wav","assets/sounds/tr808_snare_14.wav","assets/sounds/tr808_tom_08.wav","components/Soundpad/Soundpad.js","assets/sounds/sounds.js","assets/Data/Data.js","containers/DrumMachine.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","soundpad","props","activated","bounce","backgroundColor","animationName","animationDuration","borderRadius","border","react_default","a","createElement","className","onClick","playSound","onKeyDown","keyPress","tabIndex","id","style","hotkey","sounds","clap","clave","closedHat","kick01","kick03","kick11","rimshot","snare","tom","sound","source","keyCode","active","DrumMachine","state","data","Object","toConsumableArray","display","playSoundHandler","el","i","Audio","_this","displayInstrumentHandler","bounceAnimationHandler","setTimeout","play","keyPressedHandler","map","item","index","indexOf","setState","document","addEventListener","this","removeEventListener","_this2","soundpads","Soundpad_Soundpad","key","keyPressed","replace","Component","App","src_containers_DrumMachine","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17992acc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tr808_clap.dd3d636a.wav\";","module.exports = __webpack_public_path__ + \"static/media/tr808_clave.8c16180e.wav\";","module.exports = __webpack_public_path__ + \"static/media/tr808_closedhat_01.1a694aff.wav\";","module.exports = __webpack_public_path__ + \"static/media/tr808_kick_01.05e519ee.wav\";","module.exports = __webpack_public_path__ + \"static/media/tr808_kick_03.bf9a5194.wav\";","module.exports = __webpack_public_path__ + \"static/media/tr808_kick_11.7bccfb5f.wav\";","module.exports = __webpack_public_path__ + \"static/media/tr808_rimshot.9a20640a.wav\";","module.exports = __webpack_public_path__ + \"static/media/tr808_snare_14.51fed667.wav\";","module.exports = __webpack_public_path__ + \"static/media/tr808_tom_08.e3ca9799.wav\";","import React from \"react\";\nimport \"./Soundpad.scss\";\n\nconst soundpad = props => {\n    const activated = props.bounce\n        ? {\n              backgroundColor: \"#FFEE58\",\n              animationName: \"bounce\",\n              animationDuration: \"100ms\",\n              borderRadius: \"50%\",\n              border: \"1px solid black\"\n          }\n        : null;\n    return (\n        <div className=\"Soundpads\">\n            <div\n                onClick={props.playSound}\n                onKeyDown={props.keyPress}\n                tabIndex=\"0\"\n                id={props.id}\n                className=\"drum-pad\"\n                style={activated}\n            >\n                <p>{props.hotkey}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default soundpad;\n","import clap from \"./tr808_clap.wav\";\nimport clave from \"./tr808_clave.wav\";\nimport closedHat from \"./tr808_closedhat_01.wav\";\nimport kick01 from \"./tr808_kick_01.wav\";\nimport kick03 from \"./tr808_kick_03.wav\";\nimport kick11 from \"./tr808_kick_11.wav\";\nimport rimshot from \"./tr808_rimshot.wav\";\nimport snare from \"./tr808_snare_14.wav\";\nimport tom from \"./tr808_tom_08.wav\";\n\nexport default {\n\tclap,\n\tclave,\n\tclosedHat,\n\tkick01,\n\tkick03,\n\tkick11,\n\trimshot,\n\tsnare,\n\ttom\n};\n","import sounds from \"../sounds/sounds\";\n\nconst sound = [\n    {\n        id: \"clap\",\n        hotkey: \"Q\",\n        source: sounds.clap,\n        keyCode: 81,\n        active: false\n    },\n    {\n        id: \"clave\",\n        hotkey: \"W\",\n        source: sounds.clave,\n        keyCode: 87,\n        active: false\n    },\n    {\n        id: \"closedhat\",\n        hotkey: \"E\",\n        source: sounds.closedHat,\n        keyCode: 69,\n        active: false\n    },\n    {\n        id: \"kick_01\",\n        hotkey: \"A\",\n        source: sounds.kick01,\n        keyCode: 65,\n        active: false\n    },\n    {\n        id: \"kick_03\",\n        hotkey: \"S\",\n        source: sounds.kick03,\n        keyCode: 83,\n        active: false\n    },\n    {\n        id: \"kick_11\",\n        hotkey: \"D\",\n        source: sounds.kick11,\n        keyCode: 68,\n        active: false\n    },\n    {\n        id: \"rimshot\",\n        hotkey: \"Z\",\n        source: sounds.rimshot,\n        keyCode: 90,\n        active: false\n    },\n    {\n        id: \"snare\",\n        hotkey: \"X\",\n        source: sounds.snare,\n        keyCode: 88,\n        active: false\n    },\n    {\n        id: \"tom\",\n        hotkey: \"C\",\n        source: sounds.tom,\n        keyCode: 67,\n        active: false\n    }\n];\nexport default sound;\n","import React, { Component } from \"react\";\nimport Soundpad from \"../components/Soundpad/Soundpad\";\nimport \"./DrumMachine.scss\";\nimport data from \"../assets/Data/Data\";\n\nclass DrumMachine extends Component {\n    state = {\n        data: [...data],\n        display: \"TR808 beats\"\n    };\n    componentDidMount() {\n        document.addEventListener(\"keydown\", this.keyPressedHandler);\n    }\n    componentWillUnmount() {\n        document.removeEventListener(\"keydown\", this.keyPressedHandler);\n    }\n    playSoundHandler = (el, i) => {\n        const sound = new Audio(el.source);\n        this.displayInstrumentHandler(el.id);\n        this.bounceAnimationHandler(i);\n        setTimeout(() => {\n            this.bounceAnimationHandler(i);\n        }, 100);\n        return sound.play();\n    };\n    keyPressedHandler = el => {\n        this.state.data.map(item => {\n            if (el.keyCode === item.keyCode) {\n                let index = this.state.data.indexOf(item);\n                this.playSoundHandler(item, index);\n                this.displayInstrumentHandler(item.id);\n            }\n            return null;\n        });\n    };\n    displayInstrumentHandler = el => {\n        this.setState({ display: el });\n    };\n    bounceAnimationHandler = i => {\n        let data = [...this.state.data];\n        data[i].active ? (data[i].active = false) : (data[i].active = true);\n        this.setState({ data: data });\n    };\n\n    render() {\n        const soundpads = this.state.data.map((el, index) => {\n            return (\n                <Soundpad\n                    key={index}\n                    id={el.id}\n                    hotkey={el.hotkey}\n                    bounce={el.active}\n                    playSound={() => this.playSoundHandler(el, index)}\n                    keyPress={this.keyPressed}\n                />\n            );\n        });\n        return (\n            <div id=\"drum-machine\">\n                <div id=\"display\">\n                    <p>{this.state.display.replace(\"_\", \" \")}</p>\n                </div>\n                <div className=\"Wrapper\">{soundpads}</div>\n            </div>\n        );\n    }\n}\n\nexport default DrumMachine;\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport DrumMachine from \"./containers/DrumMachine\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <DrumMachine />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}